##################################################################################################################################
##################################################################################################################################
- name: Check if container should be deployed
  block:
    - set_fact: deployment_servers={{ container_custom.DEPLOYMENT_NODES | default(deployment_types[container.USER_TYPE].default_nodes) }}
    - set_fact: allowed_servers={{ container.ALLOWED_NODES | default([]) | union(deployment_types[container.USER_TYPE].allowed_nodes) }}
    - set_fact: container_state=absent
    - set_fact: container_state=started
      when:
        - inventory_hostname in deployment_servers
        - inventory_hostname in allowed_servers
            

##################################################################################################################################
##################################################################################################################################
- name: Gather all public keys of one user
  block:
    - set_fact:
        USER_PUBKEY_LIST: []
    - set_fact: USER_PUBKEY_LIST="{{USER_PUBKEY_LIST + container_custom.USER_PUBKEY.split('\n') }}"
      when: "'USER_PUBKEY' in container_custom and container_custom.USER_PUBKEY|length>0"
    - set_fact: USER_PUBKEY_LIST="{{USER_PUBKEY_LIST + lookup('url', 'https://github.com/' + container_custom.USER_PUBKEY_FROM_GITHUB + '.keys', split_lines=False).split('\n') }} "
      when: "'USER_PUBKEY_FROM_GITHUB' in container_custom and container_custom.USER_PUBKEY_FROM_GITHUB|length>0"
    - set_fact: USER_PUBKEY_STR="{{ USER_PUBKEY_LIST | join('\n') }}"


##################################################################################################################################
##################################################################################################################################
- name: Gather all allowed devices for this user
  block:
    - set_fact: ALLOWED_DEVICE_GROUPS="{{ deployment_types[container.USER_TYPE].allowed_device_groups  }}"
    - set_fact: ALLOWED_DEVICE_GROUPS="{{ ALLOWED_DEVICE_GROUPS|list + (container.ADDITIONAL_DEVICE_GROUPS | default([]) ) }}"
      when: "'ADDITIONAL_DEVICE_GROUPS' in container"
    - set_fact:
        ALLOWED_DEVICE_ID: []
    - set_fact: ALLOWED_DEVICE_ID="{{ ALLOWED_DEVICE_ID|default([]) + (compute_devices[group_id]| default([])) }}"
      with_items: "{{ALLOWED_DEVICE_GROUPS}}"
      loop_control: {loop_var: group_id}
    - set_fact: ALLOWED_DEVICE_ID="{{ ALLOWED_DEVICE_ID|default([])| unique }}"

##################################################################################################################################
##################################################################################################################################
- name: Create list of volumes for mounting based on user access rights
  set_fact: 
    CONTAINER_VOLUME_MOUNTS:
      - "{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}/{{ container.STORAGE_NAME|default(container.STACK_NAME) }}:/home/{{ container_custom.USER_NAME }}"
      - "{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}/container-settings:/home/{{ container_custom.USER_NAME }}/.containers"
      - "{{ mount_points.nfs.apps_data }}:/opt/apps/:ro"
      - "{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}:/storage/user"
      - "{{ mount_points.nfs.group_data}}:/storage/group{{ ':ro' if deployment_types[container.USER_TYPE].access == 'restricted' else '' }}"
      - "{{ mount_points.nfs.dataset_data }}:/storage/datasets{{ ':ro' if deployment_types[container.USER_TYPE].access == 'restricted' else '' }}"
      - "{{ mount_points.local.hdd_data }}/{{ container.USER_EMAIL }}:/storage/local/hdd"
      - "{{ mount_points.local.ssd_data }}/{{ container.USER_EMAIL }}/:/storage/local/ssd"
      - "{{ mount_points.local.sshd_data }}/.sshd/:/home/.sshd"

- name: Adding timezone and localtime mounts
  set_fact: CONTAINER_VOLUME_MOUNTS="{{ CONTAINER_VOLUME_MOUNTS|list|unique + [ '/etc/timezone:/etc/timezone:ro', '/etc/localtime:/etc/localtime:ro'] }}"
  when: "'USE_HOST_TIMEDATE' in container_custom and container_custom.USE_HOST_TIMEDATE|bool"
  
# Add mount points for private data (new flexible version where mounts can be updated without restarts)
- block:
    - set_fact: PRIVATE_MOUNT_STR="{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}/private/:/storage/private/:rshared"
    - set_fact: CONTAINER_VOLUME_MOUNTS="{{ CONTAINER_VOLUME_MOUNTS|list + [ PRIVATE_MOUNT_STR ] }}"
      when: "{{ container.ADDITIONAL_PRIVATE_DATA_MOUNT_GROUPS|default([])|length > 0 or not CURRENT_CONTAINER_INFO.exists or PRIVATE_MOUNT_STR in CURRENT_CONTAINER_INFO.container.HostConfig.Binds }}"
    
    - set_fact: ALLOWED_PRIVATE_DATA_MOUNT_GROUPS="{{ deployment_types[container.USER_TYPE].allowed_private_data_mount_groups | default([]) + container.ADDITIONAL_PRIVATE_DATA_MOUNT_GROUPS | default([]) }}"
    
# Add mount points for private data (legacy version)
- block:
    - set_fact: ALLOWED_PRIVATE_DATA_GROUPS="{{ deployment_types[container.USER_TYPE].allowed_private_data_groups | default([]) + container.ADDITIONAL_PRIVATE_DATA_GROUPS | default([]) }}"

    - set_fact: CONTAINER_VOLUME_MOUNTS="{{ CONTAINER_VOLUME_MOUNTS|list + [ mount_points.nfs.private_data + "/" + group_id +  ":/storage/private/" + group_id ] }}"
      with_items: "{{ALLOWED_PRIVATE_DATA_GROUPS}}"
      loop_control: {loop_var: group_id}

- name: Ensure private data folders exist with correct premissions
  file: 
    path: "{{mount_points.nfs.private_data}}/{{group_id}}"
    state: directory 
    owner: "{{ nfs_user_name }}" 
    group: "{{ nfs_user_name }}"
  with_items: "{{ALLOWED_PRIVATE_DATA_GROUPS + ALLOWED_PRIVATE_DATA_MOUNT_GROUPS}}"
  loop_control: {loop_var: group_id}

##################################################################################################################################
##################################################################################################################################
- name: List current private data mounts for {{ container.STACK_NAME }}
  ansible.builtin.find:
    path: "{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}/private"
    file_type: directory
    recurse: no
  register: CURRENT_PRIVATE_DATA_MOUNTS

- name: Mounting private data for {{ container.STACK_NAME }}
  ansible.posix.mount:
    path: "{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}/private/{{ group_id }}"
    src: "{{ mount_points.nfs.private_data }}/{{ group_id }}"
    state: mounted
    opts: bind
    fstype: none
  with_items: "{{ALLOWED_PRIVATE_DATA_MOUNT_GROUPS}}"
  loop_control: {loop_var: group_id}

- name: Removing forbidden private data mounts for {{ container.STACK_NAME }}
  ansible.posix.mount:
    path: "{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}/private/{{ item.path|basename }}"
    state: absent
  with_items: "{{ CURRENT_PRIVATE_DATA_MOUNTS.files }}"
  loop_control:
    label: "{{ item.path|basename }}"
  when: "{{ item.path|basename not in ALLOWED_PRIVATE_DATA_MOUNT_GROUPS }}"
  
  
- name: Grant special access to all users data if admin privilege
  ansible.posix.mount:
    path: "{{ mount_points.nfs.user_data }}/{{ container.USER_EMAIL }}/private/user_data"
    src: "{{ mount_points.nfs.user_data }}"
    state: mounted
    opts: bind
    fstype: none
    state: "{{ 'mounted' if container.ADMIN_USER_ACCESS|default(False) else 'absent'}}"
  
##################################################################################################################################
##################################################################################################################################
- name: Enable docker access via docker.sock if allowed
  block:
    - set_fact: CONTAINER_VOLUME_MOUNTS="{{ CONTAINER_VOLUME_MOUNTS|list|unique + [ '/var/run/docker.sock:/var/run/docker.sock'] }}"
    - command: 'sed -nr "s/^docker:x:([0-9]+):.*/\1/p" /etc/group'
      register: DOCKER_GROUP_ID
      check_mode: no
      changed_when: False
    - set_fact: 
        UPDATED_CONTAINER_VARS:
          USER_GROUPS: "docker={{DOCKER_GROUP_ID.stdout | default('999')}}"
    - set_fact: container_extra="{{ container_extra | combine(UPDATED_CONTAINER_VARS) }}"
    - set_fact: 
        UPDATED_CUSTOM_CONTAINER_VARS:
          INSTALL_REPOSITORY_KEYS: "https://download.docker.com/linux/ubuntu/gpg{{(',' +container_custom.INSTALL_REPOSITORY_KEYS) if container_custom.INSTALL_REPOSITORY_KEYS|default('')|length > 0 else ''}}"
          INSTALL_REPOSITORY_SOURCES: "https://download.docker.com/linux/ubuntu stable{{(',' +container_custom.INSTALL_REPOSITORY_SOURCES) if container_custom.INSTALL_REPOSITORY_SOURCES|default('')|length > 0 else ''}}"
          INSTALL_PACKAGES: "docker-ce-cli {{container_custom.INSTALL_PACKAGES|default('')}}"
    - set_fact: container_custom="{{ container_custom | combine(UPDATED_CUSTOM_CONTAINER_VARS)}}"
  when: "'ENABLE_DOCKER_ACCESS' in container and container.ENABLE_DOCKER_ACCESS|bool"