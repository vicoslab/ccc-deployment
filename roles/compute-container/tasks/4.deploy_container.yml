##################################################################################################################################
##################################################################################################################################
- name: Ensure that requested container image does exist
  block: 
  - set_fact: CONTAINER_IMAGE="{{ container_custom.CONTAINER_IMAGE }}"  
  - name: Check if requested docker image exists
    community.docker.docker_image:
      name: "{{ CONTAINER_IMAGE }}"
      source: pull
      force_source: "{{ 'yes' if compute_container_image_pull_always|default(True) else 'no' }}"
      
  rescue: # use original container and provide IMAGE error to user
    - set_fact: CONTAINER_IMAGE="{{ container.CONTAINER_IMAGE }}"
    - name: setting CONTAINER_REPORT_IMAGE_ERROR
      set_fact: 
        CONTAINER_REPORT_IMAGE_ERROR: |2
          {{ CONTAINER_REPORT_IMAGE_ERROR|default("") }} 
                    
          IMAGE ERROR: CANNOT FIND '{{container_custom.CONTAINER_IMAGE}}', reverted to DEFAULT image !!

##################################################################################################################################
##################################################################################################################################
- set_fact:
    DEVICE_REQUESTS:
      - # Limit to specific GPU devices if compute_devices are defined otherwise use all devices
        # CAUTION: provide options={}, device_ids=[] and count=0 as default to ENABLE proper detection of changes in container
        driver: 'nvidia'
        device_ids: "{{ ALLOWED_DEVICE_ID if compute_devices is defined else []}}"
        count: "{{ 0 if compute_devices is defined else -1}}"
        capabilities: 
          - ['gpu']
        options: "{{ dict() }}"
  # make sure to skip device_requests if Docker API does not support it (i.e. Docker server version above 19.03 is OK)
  when: "DOCKER_INFO.host_info['ServerVersion'] is version('19.03', '>=') and compute_devices is defined and compute_devices is not none"


##################################################################################################################################
##################################################################################################################################

- name: Prepare list of requested networks
  set_fact: 
    CONTAINER_NETWORK_LIST: "{{ compute_container_networks[deployment_types[container.USER_TYPE].access] }}"

##################################################################################################################################
##################################################################################################################################


# Deploy the stack on each worker node
- name: Deploy container {{ container.STACK_NAME }}
  throttle: 1
  community.docker.docker_container:
    name: "{{ container.STACK_NAME }}"
    image: "{{ CONTAINER_IMAGE }}"
    state: "{{ container_state }}"
    privileged: "{{ container.RUN_PRIVILEGED|default(False)|bool }}"
    security_opts: "{{ ['seccomp:unconfined'] if container.RUN_PRIVILEGED|default(False)|bool else [] }}"
    #recreate: yes
    hostname: "{{ inventory_hostname }}"
    # NOTE: need to pass labels as string of python dict so that HTTP_PORT
    #       is correctly used in the key
    labels: |
      {
      {% for TCP_PORT in container_custom.FRP_PORTS.TCP %}
       "frp.{{ TCP_PORT }}": "tcp",
       "frp.{{ TCP_PORT }}.health_check": "false",
      {% endfor %}
      "frp.enabled": "true",
      "frp.notify_email": "{{ container.USER_EMAIL }}",
      {% for HTTP_PORT in container_custom.FRP_PORTS.HTTP %}      
      "frp.{{ HTTP_PORT.port }}": "{{ 'https' if HTTP_PORT.https_without_pass|default(false)|bool else 'http'}}",
        {% if HTTP_PORT.subdomain_hostname_prefix|default(true)|bool %}
      "frp.{{ HTTP_PORT.port }}.http.subdomain": "{{ inventory_hostname }}-{{ HTTP_PORT.subdomain }}",
        {% else %}
      "frp.{{ HTTP_PORT.port }}.http.subdomain": "{{ HTTP_PORT.subdomain }}",
        {% endif %}
        {% if 'pass' in HTTP_PORT.keys() and not HTTP_PORT.https_without_pass|default(false)|bool %}
      "frp.{{ HTTP_PORT.port }}.http.username": "{{ HTTP_PORT.user|default(container_custom.USER_NAME) }}",
      "frp.{{ HTTP_PORT.port }}.http.password": "{{ HTTP_PORT.pass }}",
        {% endif %}
      "frp.{{ HTTP_PORT.port }}.health_check": "{{ HTTP_PORT.health_check if 'health_check' in HTTP_PORT.keys() else 'false' }}",
      {% endfor %}
      "ccc-user.name": "{{ container.USER_FULLNAME }}",
      "ccc-user.email": "{{ container.USER_EMAIL }}",
      "ccc-user.mentor": "{{ container.USER_MENTOR | default(omit) }}"
      }
    exposed_ports: |
      [
      {% for TCP_PORT in container_custom.FRP_PORTS.TCP %}
      "{{ TCP_PORT }}",
      {% endfor %}
      {% for HTTP_PORT in container_custom.FRP_PORTS.HTTP %}
      "{{ HTTP_PORT.port }}",
      {% endfor %}
      ]
    shm_size: "{{ container_custom.SHM_SIZE | default('2gb') }}"
    env:
      USER_NAME: "{{ container_custom.USER_NAME }}"
      USER_ID: '{{ nfs_user_id | string }}'
      USER_PUBKEY: "{{ USER_PUBKEY_STR }}"
      USER_GROUPS: "{{ container_extra.USER_GROUPS|default(omit) }}"
      INSTALL_PACKAGES: "{{ container_custom.INSTALL_PACKAGES | default('') }}"
      INSTALL_REPOSITORY_KEYS: "{{ container_custom.INSTALL_REPOSITORY_KEYS | default('') }}"
      INSTALL_REPOSITORY_SOURCES: "{{ container_custom.INSTALL_REPOSITORY_SOURCES | default('') }}"
      RUNIT_STATUS_FILE: "/home/{{ container_custom.USER_NAME }}/.containers/{{ container.STACK_NAME }}.status"
      RUNIT_WORKING_ENV_FILE: "/home/{{ container_custom.USER_NAME }}/.containers/{{ container.STACK_NAME }}.env-backup"
      APPS: "{{ compute_container_apps|join(':') }}"
      CONTAINER_NAME: "{{ container.STACK_NAME }}"
      CONTAINER_NODE: "{{ inventory_hostname }}"
      CONTAINER_IMAGE: "{{ CONTAINER_IMAGE }}"
      CONTAINER_WELCOME_MSG: |2
         * Pre-installed APPS: '{{ compute_container_apps| map('regex_replace', '^(?P<path>.+,)', '') | map('basename') | map('splitext') | map('first') | unique| sort | join(' ') }}'
        
        Available shared and local storage:
         * /storage/user         * /storage/local/hdd
         * /storage/group        * /storage/local/ssd
         * /storage/datasets
        
        Container config: '/home/{{ container_custom.USER_NAME }}/.container/{{container.STACK_NAME}}.yml'

        FOR MORE DOCUMENTATION SEE: https://github.com/vicoslab/ccc-deployment/blob/master/USER_INSTRUCTION.md{{ CONTAINER_REPORT_IMAGE_ERROR|default('') }}
        
    # set device requests if docker server supports it
    device_requests: "{{ DEVICE_REQUESTS | default(omit)  }}"
    runtime: "{{compute_container_runtime | default(omit)}}"
    
    restart_policy: unless-stopped
    
    volumes: "{{ CONTAINER_VOLUME_MOUNTS }}"
    keep_volumes: no
    
    networks: "{{ CONTAINER_NETWORK_LIST }}"      
    purge_networks: no
    
    pull: no
    #container_default_behavior: no_defaults
  register: contianer_status